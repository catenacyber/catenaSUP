// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userpass.proto

/*
Package catenaSUP is a generated protocol buffer package.

It is generated from these files:
	userpass.proto

It has these top-level messages:
	UserPass
	User
	Empty
	Id
*/
package catenaSUP

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserPass struct {
	User     string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *UserPass) Reset()                    { *m = UserPass{} }
func (m *UserPass) String() string            { return proto.CompactTextString(m) }
func (*UserPass) ProtoMessage()               {}
func (*UserPass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserPass) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserPass) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type User struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Id struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Id) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*UserPass)(nil), "catenaSUP.UserPass")
	proto.RegisterType((*User)(nil), "catenaSUP.User")
	proto.RegisterType((*Empty)(nil), "catenaSUP.Empty")
	proto.RegisterType((*Id)(nil), "catenaSUP.Id")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CatenaUserPass service

type CatenaUserPassClient interface {
	AddUser(ctx context.Context, in *UserPass, opts ...grpc.CallOption) (*Id, error)
	ChangePass(ctx context.Context, in *UserPass, opts ...grpc.CallOption) (*Empty, error)
	CheckUserPass(ctx context.Context, in *UserPass, opts ...grpc.CallOption) (*Id, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
}

type catenaUserPassClient struct {
	cc *grpc.ClientConn
}

func NewCatenaUserPassClient(cc *grpc.ClientConn) CatenaUserPassClient {
	return &catenaUserPassClient{cc}
}

func (c *catenaUserPassClient) AddUser(ctx context.Context, in *UserPass, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/catenaSUP.CatenaUserPass/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catenaUserPassClient) ChangePass(ctx context.Context, in *UserPass, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/catenaSUP.CatenaUserPass/ChangePass", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catenaUserPassClient) CheckUserPass(ctx context.Context, in *UserPass, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/catenaSUP.CatenaUserPass/CheckUserPass", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catenaUserPassClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/catenaSUP.CatenaUserPass/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CatenaUserPass service

type CatenaUserPassServer interface {
	AddUser(context.Context, *UserPass) (*Id, error)
	ChangePass(context.Context, *UserPass) (*Empty, error)
	CheckUserPass(context.Context, *UserPass) (*Id, error)
	DeleteUser(context.Context, *User) (*Empty, error)
}

func RegisterCatenaUserPassServer(s *grpc.Server, srv CatenaUserPassServer) {
	s.RegisterService(&_CatenaUserPass_serviceDesc, srv)
}

func _CatenaUserPass_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatenaUserPassServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catenaSUP.CatenaUserPass/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatenaUserPassServer).AddUser(ctx, req.(*UserPass))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatenaUserPass_ChangePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatenaUserPassServer).ChangePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catenaSUP.CatenaUserPass/ChangePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatenaUserPassServer).ChangePass(ctx, req.(*UserPass))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatenaUserPass_CheckUserPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatenaUserPassServer).CheckUserPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catenaSUP.CatenaUserPass/CheckUserPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatenaUserPassServer).CheckUserPass(ctx, req.(*UserPass))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatenaUserPass_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatenaUserPassServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catenaSUP.CatenaUserPass/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatenaUserPassServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _CatenaUserPass_serviceDesc = grpc.ServiceDesc{
	ServiceName: "catenaSUP.CatenaUserPass",
	HandlerType: (*CatenaUserPassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _CatenaUserPass_AddUser_Handler,
		},
		{
			MethodName: "ChangePass",
			Handler:    _CatenaUserPass_ChangePass_Handler,
		},
		{
			MethodName: "CheckUserPass",
			Handler:    _CatenaUserPass_CheckUserPass_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CatenaUserPass_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userpass.proto",
}

func init() { proto.RegisterFile("userpass.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2d, 0x4e, 0x2d,
	0x2a, 0x48, 0x2c, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0x4e, 0x2c, 0x49,
	0xcd, 0x4b, 0x0c, 0x0e, 0x0d, 0x50, 0xb2, 0xe2, 0xe2, 0x08, 0x2d, 0x4e, 0x2d, 0x0a, 0x48, 0x2c,
	0x2e, 0x16, 0x12, 0xe2, 0x62, 0x01, 0x29, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3,
	0x85, 0xa4, 0xb8, 0x38, 0x40, 0x1a, 0xcb, 0xf3, 0x8b, 0x52, 0x24, 0x98, 0xc0, 0xe2, 0x70, 0xbe,
	0x92, 0x14, 0x17, 0x0b, 0x48, 0x2f, 0x36, 0x7d, 0x4a, 0xec, 0x5c, 0xac, 0xae, 0xb9, 0x05, 0x25,
	0x95, 0x4a, 0x22, 0x5c, 0x4c, 0x9e, 0x29, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x60, 0x05, 0x2c,
	0x41, 0x4c, 0x99, 0x29, 0x46, 0x8f, 0x18, 0xb9, 0xf8, 0x9c, 0xc1, 0x8e, 0x80, 0xdb, 0xae, 0xcf,
	0xc5, 0xee, 0x98, 0x92, 0x02, 0x36, 0x50, 0x58, 0x0f, 0xee, 0x40, 0x3d, 0x98, 0xbc, 0x14, 0x2f,
	0x92, 0xa0, 0x67, 0x8a, 0x12, 0x83, 0x90, 0x29, 0x17, 0x97, 0x73, 0x46, 0x62, 0x5e, 0x7a, 0x2a,
	0x58, 0x3b, 0x56, 0x3d, 0x02, 0x48, 0x82, 0x10, 0xe7, 0x80, 0xb4, 0xf1, 0x3a, 0x67, 0xa4, 0x26,
	0x67, 0xc3, 0x2d, 0x26, 0xce, 0x36, 0x43, 0x2e, 0x2e, 0x97, 0xd4, 0x9c, 0xd4, 0x92, 0x54, 0xb0,
	0x0b, 0xf9, 0xd1, 0xf4, 0x60, 0xb3, 0x29, 0x89, 0x0d, 0x1c, 0xda, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0x63, 0xcf, 0x3f, 0x7f, 0x01, 0x00, 0x00,
}
